<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>70</x>
      <y>260</y>
      <w>270</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>List&lt;Type&gt;
--
# size : int
--
List Structure methods
getFromIndex(int) : Type
add(Type) : void
addIndex(int, Type) : void
remove(int) : Type
List Accessors
getSize() : int
getFront() : LinearNode&lt;Type&gt; *
getEnd() : LinearNode&lt;Type&gt; *

bg=green

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>480</y>
      <w>420</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front : LinearNode&lt;Type&gt;*
- end : LinearNode&lt;Type&gt;*
--
+ LinkedList() : constructor
+ ~LinkedList() : destructor
List Structure Methos
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

List Accessors
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>530</y>
      <w>280</w>
      <h>340</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--

--
+ Queue() : constructor
+ ~Queue() : destructor

Stack Methods
+ push(Type) : void
+ pop() : Type
+ peek() : Type
List Structure Methos
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

List Accessors
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>780</x>
      <y>360</y>
      <w>290</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--

--
+ Stack() : constructor
+ ~Stack() : destructor

Queue Methods
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

List Structure Methos
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

List Accessors
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>10</y>
      <w>430</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;
--

- next : Node&lt;Type&gt;

--
+ LinearNode&lt;Type&gt;() : constructor
+ LinearNode&lt;Type&gt;(Type) : constructor
+ LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;) : constructor

+getNext() : Node&lt;Type&gt; *
+ setNext(Node&lt;Type&gt; *) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>480</x>
      <y>0</y>
      <w>330</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>Node
--
+Node&lt;Type&gt;() : constructor
+ Node&lt;Type&gt;(Type) : constructor

+ getData() : Type
+ setData(Type) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>140</y>
      <w>70</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-

bg=black</panel_attributes>
    <additional_attributes>50.0;10.0;50.0;50.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>20</x>
      <y>350</y>
      <w>70</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-

bg=black</panel_attributes>
    <additional_attributes>50.0;20.0;10.0;20.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>440</x>
      <y>560</y>
      <w>60</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>440</x>
      <y>410</y>
      <w>360</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;160.0;30.0;90.0;310.0;90.0;340.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>500</x>
      <y>170</y>
      <w>240</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>CrimeData
--
- Too Many
--
+CrimeData() : constructor
+ CrimeData(string) : constructor
+ getXXX() : various
+ == : bool
+ * ; ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>500</x>
      <y>330</y>
      <w>210</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>Music
--
- Too Many
--
+ Music() : constructor
+ Music(string) : constructor
+ getXXX() : various
+ == : bool
+ * ; ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>550</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>LinearTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1290</x>
      <y>550</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>TreeTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>660</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>GraphTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1290</x>
      <y>660</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>HashtableTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>770</y>
      <w>180</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>AlgorithmTester

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>530</y>
      <w>370</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>350.0;20.0;330.0;20.0;330.0;250.0;30.0;250.0;30.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>100</y>
      <w>220</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--

- nextNode : DN*
- prevNode : DN*

--

DN()
DN(Type)
DN(Type; DN; DN*)
get/set</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>800</x>
      <y>80</y>
      <w>80</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;10.0;40.0;230.0;60.0;230.0</additional_attributes>
  </element>
</diagram>
